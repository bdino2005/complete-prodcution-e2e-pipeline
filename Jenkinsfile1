pipeline {
    agent {
        docker { image 'maven:3.8.1-openjdk-11' }

    }
     tools {
        jdk 'Java11'
        maven 'Maven3'
    }
    
    stages {
        stage("Cleanup Workspace") {
            steps {
                cleanWs()
            }
        }
        stage("Checkout from SCM") {
            steps {
                dir('/var/lib/jenkins/workspace/project2-maven') {
 
                    git branch: 'main', credentialsId: 'github', url: 'https://github.com/bdino2005/complete-prodcution-e2e-pipeline'
                }
            }
        }
        stage("Build Application") {
            steps {
                dir('/var/lib/jenkins/workspace/project2-maven') {
 
                    sh "mvn clean package"
                }
            }
        }
        stage("Test Application") {
            steps {
                dir('/var/lib/jenkins/workspace/project2-maven') {
 
                    sh "mvn test"
                }
            }
        }
    }
}


pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/bdino2005/Jenkins-Zero-To-Hero.git'
      }
    }
    
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://3.101.140.225:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "bdino2005/ultimate-cicd:${BUILD_NUMBER}"
      }
      steps {
        script {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
          withCredentials([string(credentialsId: 'docker-cred', variable: 'DOCKER_REGISTRY_URL')]) {
            docker.withRegistry("${DOCKER_REGISTRY_URL}", 'docker-cred') {
              def dockerImage = docker.image("${DOCKER_IMAGE}")
              dockerImage.push()
            }
          }
        }
      }
    }
  }
}

